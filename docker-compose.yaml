services:

  app:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    container_name: springcloud-dev-container
    volumes:
      # Mount the project source code
      - .:/workspace:cached
      # Persist maven repository to speed up subsequent builds
      - maven_repo:/root/.m2
    networks:
      - SpringCloudNet
    # Keep the container running for interactive development
    command: sleep infinity

  consul:
    image: hashicorp/consul
    container_name: consul
    ports:
      - "8500:8500"
      - "8300:8300"
      - "8301:8301"
      - "8302:8302"
      - "8600:8600"
    command: [
      "agent",
      "-dev",
      "-server",
      "-bootstrap-expect=1",
      "-ui",
      "-bind=0.0.0.0",
      "-client=0.0.0.0",
      "-data-dir=/consul/data"
    ]
    volumes:
      - consul_data:/consul/data
    restart: always
    networks:
      - SpringCloudNet

  rabbitmq:
    restart: always
    image: rabbitmq:management
    container_name: rabbitmq
    hostname: rabbit
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      TZ: Asia/Shanghai
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_conf:/etc/rabbitmq
    networks:
      - SpringCloudNet

  mysql8.0:
    image: mysql:8.0.21
    container_name: mysql8
    restart: always
    environment:
      TZ: Asia/Shanghai
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - 3306:3306
    volumes:
      - mysql8_data:/var/lib/mysql/
      - mysql8_conf:/etc/mysql/conf.d/
      - mysql8_init:/docker-entrypoint-initdb.d/
      - mysql8_logs:/logs/
    command:
      --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - SpringCloudNet

  redis:
    image: redis:7.2
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis_conf:/usr/local/etc/redis/redis.conf:rw
      - redis_data:/data:rw
    command: /bin/bash -c "redis-server /usr/local/etc/redis/redis.conf"
    networks:
      - SpringCloudNet

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - SpringCloudNet

  minio:
    container_name: milvus-minio
    image: minio/minio
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - SpringCloudNet

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.9
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - SpringCloudNet

  xxl-job-admin:
    image: xuxueli/xxl-job-admin:3.0.0
    container_name: xxl_job_admin
    depends_on:
      mysql8.0:
        condition: service_healthy
    ports:
      - "8834:8800"
    environment:
      PARAMS: >
        --server.port=8800
        --server.servlet.context-path=/xxl-job-admin
        --spring.datasource.url=jdbc:mysql://mysql8:3306/${MYSQL_DATABASE}?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai
        --spring.datasource.username=${XXL_JOB_DB_USERNAME}
        --spring.datasource.password=${XXL_JOB_DB_PASSWORD}
        --xxl.job.accessToken=${XXL_JOB_ACCESS_TOKEN}
    networks:
      - SpringCloudNet

  pgvector:
    image: pgvector/pgvector:pg17
    container_name: pgvector
    environment:
      POSTGRES_USER: ${PGVECTOR_USER}
      POSTGRES_PASSWORD: ${PGVECTOR_PASSWORD}
      POSTGRES_DB: ${PGVECTOR_DB}
    ports:
      - "5433:5432"
    volumes:
      - pgvector_data:/var/lib/postgresql/data
      - pgvector_config:/etc/postgresql/17/main
      - pgvector_logs:/var/log/postgresql
    restart: always
    networks:
      - SpringCloudNet

  postgres:
    image: postgres:16.9
    container_name: postgres
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - SpringCloudNet

volumes:
  # Maven repository cache
  maven_repo:

  # Milvus 的 MinIO 服务
  minio_data:
  minio_config:

  # Consul 服务
  consul_data:

  # RabbitMQ 服务
  rabbitmq_data:
  rabbitmq_conf:

  # MySQL 8.0 服务
  mysql8_data:
  mysql8_conf:
  mysql8_init:
  mysql8_logs:

  # Redis 服务
  redis_conf:
  redis_data:

  # Milvus 的 etcd 服务
  etcd_data:

  # Milvus Standalone 服务
  milvus_data:

  # pgvector 服务
  pgvector_data:
  pgvector_config:
  pgvector_logs:

  # Postgres 服务
  postgres_data:


networks:
  SpringCloudNet:
    driver: bridge
